import * as net from 'node:net';
import { MessageProcessor } from './MessageProcessor';
import { IPCMessageReader, IPCMessageWriter, SocketMessageReader, SocketMessageWriter, StreamMessageReader, StreamMessageWriter, } from 'vscode-jsonrpc/node';
import { CompletionRequest, CompletionResolveRequest, DefinitionRequest, DidOpenTextDocumentNotification, DidSaveTextDocumentNotification, DidChangeTextDocumentNotification, DidChangeConfigurationNotification, DidCloseTextDocumentNotification, ExitNotification, HoverRequest, InitializeRequest, PublishDiagnosticsNotification, DidChangeWatchedFilesNotification, ShutdownRequest, DocumentSymbolRequest, WorkspaceSymbolRequest, createConnection, } from 'vscode-languageserver/node';
import { Logger } from './Logger';
import { DEFAULT_SUPPORTED_EXTENSIONS, DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS, } from './parseDocument';
const buildOptions = (options) => {
    const serverOptions = { ...options };
    if (serverOptions.loadConfigOptions) {
        const { extensions, rootDir } = serverOptions.loadConfigOptions;
        if (!rootDir) {
            if (serverOptions.configDir) {
                serverOptions.loadConfigOptions.rootDir = serverOptions.configDir;
            }
            else {
                serverOptions.loadConfigOptions.rootDir = process.cwd();
            }
        }
        if (serverOptions.extensions) {
            serverOptions.loadConfigOptions.extensions = [
                ...serverOptions.extensions,
                ...(extensions || []),
            ];
        }
    }
    else {
        serverOptions.loadConfigOptions = {
            rootDir: options.configDir || process.cwd(),
            extensions: [],
        };
    }
    return serverOptions;
};
export default async function startServer(options) {
    if (options === null || options === void 0 ? void 0 : options.method) {
        const finalOptions = buildOptions(options);
        let reader;
        let writer;
        switch (options.method) {
            case 'socket':
                if (!options.port) {
                    process.stderr.write('--port is required to establish socket connection.');
                    process.exit(1);
                }
                const { port, hostname } = options;
                const socket = net
                    .createServer(async (client) => {
                    client.setEncoding('utf8');
                    reader = new SocketMessageReader(client);
                    writer = new SocketMessageWriter(client);
                    client.on('end', () => {
                        socket.close();
                        process.exit(0);
                    });
                    const s = await initializeHandlers({
                        reader,
                        writer,
                        options: finalOptions,
                    });
                    s.listen();
                })
                    .listen(port, hostname);
                return;
            case 'stream':
                reader = new StreamMessageReader(process.stdin);
                writer = new StreamMessageWriter(process.stdout);
                break;
            default:
                reader = new IPCMessageReader(process);
                writer = new IPCMessageWriter(process);
                break;
        }
        const serverWithHandlers = await initializeHandlers({
            reader,
            writer,
            options: finalOptions,
        });
        serverWithHandlers.listen();
    }
}
async function initializeHandlers({ reader, writer, options, }) {
    const connection = createConnection(reader, writer);
    const logger = new Logger(connection);
    try {
        await addHandlers({ connection, logger, ...options });
        return connection;
    }
    catch (err) {
        logger.error('There was an error initializing the server connection');
        logger.error(String(err));
        process.exit(1);
    }
}
function reportDiagnostics(diagnostics, connection) {
    if (diagnostics) {
        void connection.sendNotification(PublishDiagnosticsNotification.type, diagnostics);
    }
}
async function addHandlers({ connection, logger, config, parser, fileExtensions, graphqlFileExtensions, tmpDir, loadConfigOptions, }) {
    const messageProcessor = new MessageProcessor({
        logger,
        config,
        parser,
        fileExtensions: fileExtensions || DEFAULT_SUPPORTED_EXTENSIONS,
        graphqlFileExtensions: graphqlFileExtensions || DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS,
        tmpDir,
        loadConfigOptions,
        connection,
    });
    connection.onNotification(DidOpenTextDocumentNotification.type, async (params) => {
        const diagnostics = await messageProcessor.handleDidOpenOrSaveNotification(params);
        reportDiagnostics(diagnostics, connection);
    });
    connection.onNotification(DidSaveTextDocumentNotification.type, async (params) => {
        const diagnostics = await messageProcessor.handleDidOpenOrSaveNotification(params);
        reportDiagnostics(diagnostics, connection);
    });
    connection.onNotification(DidChangeTextDocumentNotification.type, async (params) => {
        const diagnostics = await messageProcessor.handleDidChangeNotification(params);
        reportDiagnostics(diagnostics, connection);
    });
    connection.onNotification(DidCloseTextDocumentNotification.type, params => messageProcessor.handleDidCloseNotification(params));
    connection.onRequest(ShutdownRequest.type, () => messageProcessor.handleShutdownRequest());
    connection.onNotification(ExitNotification.type, () => messageProcessor.handleExitNotification());
    connection.onNotification('$/cancelRequest', () => ({}));
    connection.onRequest(InitializeRequest.type, (params, token) => messageProcessor.handleInitializeRequest(params, token, loadConfigOptions.rootDir));
    connection.onRequest(CompletionRequest.type, params => messageProcessor.handleCompletionRequest(params));
    connection.onRequest(CompletionResolveRequest.type, item => item);
    connection.onRequest(DefinitionRequest.type, params => messageProcessor.handleDefinitionRequest(params));
    connection.onRequest(HoverRequest.type, params => messageProcessor.handleHoverRequest(params));
    connection.onNotification(DidChangeWatchedFilesNotification.type, params => messageProcessor.handleWatchedFilesChangedNotification(params));
    connection.onRequest(DocumentSymbolRequest.type, params => messageProcessor.handleDocumentSymbolRequest(params));
    connection.onRequest(WorkspaceSymbolRequest.type, params => messageProcessor.handleWorkspaceSymbolRequest(params));
    connection.onNotification(DidChangeConfigurationNotification.type, params => messageProcessor.handleDidChangeConfiguration(params));
}
//# sourceMappingURL=startServer.js.map