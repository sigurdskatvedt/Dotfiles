import { extname } from 'node:path';
import { Range, Position } from 'graphql-language-service';
import { findGraphQLTags, DEFAULT_TAGS } from './findGraphQLTags';
import { NoopLogger } from './Logger';
export const DEFAULT_SUPPORTED_EXTENSIONS = [
    '.js',
    '.cjs',
    '.mjs',
    '.es',
    '.esm',
    '.es6',
    '.ts',
    '.jsx',
    '.tsx',
    '.vue',
    '.svelte',
    '.cts',
    '.mts',
];
export const DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS = [
    '.graphql',
    '.graphqls',
    '.gql',
];
export function parseDocument(text, uri, fileExtensions = DEFAULT_SUPPORTED_EXTENSIONS, graphQLFileExtensions = DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS, logger = new NoopLogger()) {
    const ext = extname(uri);
    if (fileExtensions.includes(ext)) {
        if (DEFAULT_TAGS.includes(text)) {
            return [];
        }
        const templates = findGraphQLTags(text, ext, uri, logger);
        return templates.map(({ template, range }) => ({ query: template, range }));
    }
    if (graphQLFileExtensions.includes(ext)) {
        const query = text;
        if (!query && query !== '') {
            return [];
        }
        const lines = query.split('\n');
        const range = new Range(new Position(0, 0), new Position(lines.length - 1, lines.at(-1).length - 1));
        return [{ query, range }];
    }
    return [{ query: text, range: null }];
}
//# sourceMappingURL=parseDocument.js.map