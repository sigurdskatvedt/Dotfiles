"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDocument = exports.DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS = exports.DEFAULT_SUPPORTED_EXTENSIONS = void 0;
const node_path_1 = require("node:path");
const graphql_language_service_1 = require("graphql-language-service");
const findGraphQLTags_1 = require("./findGraphQLTags");
const Logger_1 = require("./Logger");
exports.DEFAULT_SUPPORTED_EXTENSIONS = [
    '.js',
    '.cjs',
    '.mjs',
    '.es',
    '.esm',
    '.es6',
    '.ts',
    '.jsx',
    '.tsx',
    '.vue',
    '.svelte',
    '.cts',
    '.mts',
];
exports.DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS = [
    '.graphql',
    '.graphqls',
    '.gql',
];
function parseDocument(text, uri, fileExtensions = exports.DEFAULT_SUPPORTED_EXTENSIONS, graphQLFileExtensions = exports.DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS, logger = new Logger_1.NoopLogger()) {
    const ext = (0, node_path_1.extname)(uri);
    if (fileExtensions.includes(ext)) {
        if (findGraphQLTags_1.DEFAULT_TAGS.includes(text)) {
            return [];
        }
        const templates = (0, findGraphQLTags_1.findGraphQLTags)(text, ext, uri, logger);
        return templates.map(({ template, range }) => ({ query: template, range }));
    }
    if (graphQLFileExtensions.includes(ext)) {
        const query = text;
        if (!query && query !== '') {
            return [];
        }
        const lines = query.split('\n');
        const range = new graphql_language_service_1.Range(new graphql_language_service_1.Position(0, 0), new graphql_language_service_1.Position(lines.length - 1, lines.at(-1).length - 1));
        return [{ query, range }];
    }
    return [{ query: text, range: null }];
}
exports.parseDocument = parseDocument;
//# sourceMappingURL=parseDocument.js.map