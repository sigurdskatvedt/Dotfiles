"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findGraphQLTags = exports.DEFAULT_TAGS = void 0;
const graphql_language_service_1 = require("graphql-language-service");
const parser_1 = require("@babel/parser");
const VueParser = __importStar(require("@vue/compiler-sfc"));
const PARSER_OPTIONS = {
    allowImportExportEverywhere: true,
    allowReturnOutsideFunction: true,
    allowSuperOutsideMethod: true,
    allowAwaitOutsideFunction: true,
    errorRecovery: true,
    sourceType: 'module',
    strictMode: false,
};
const DEFAULT_STABLE_TAGS = ['graphql', 'graphqls', 'gql'];
exports.DEFAULT_TAGS = [...DEFAULT_STABLE_TAGS, 'graphql.experimental'];
const BABEL_PLUGINS = [
    'asyncDoExpressions',
    'asyncGenerators',
    'bigInt',
    'classProperties',
    'classPrivateProperties',
    'classPrivateMethods',
    'classStaticBlock',
    'doExpressions',
    'decimal',
    'decorators-legacy',
    'destructuringPrivate',
    'dynamicImport',
    'exportDefaultFrom',
    'exportNamespaceFrom',
    'functionBind',
    'functionSent',
    'importMeta',
    'importAssertions',
    'jsx',
    'logicalAssignment',
    'moduleBlocks',
    'moduleStringNames',
    'nullishCoalescingOperator',
    'numericSeparator',
    'objectRestSpread',
    'optionalCatchBinding',
    'optionalChaining',
    'privateIn',
    'regexpUnicodeSets',
    'throwExpressions',
    'topLevelAwait',
];
function parseVueSFC(source) {
    const { errors, descriptor } = VueParser.parse(source);
    if (errors.length !== 0) {
        return { type: 'error', errors };
    }
    let scriptBlock = null;
    try {
        scriptBlock = VueParser.compileScript(descriptor, { id: 'foobar' });
    }
    catch (error) {
        if (error instanceof Error &&
            error.message === '[@vue/compiler-sfc] SFC contains no <script> tags.') {
            return {
                type: 'ok',
                scriptSetupAst: [],
                scriptAst: [],
                scriptOffset: 0,
            };
        }
        return { type: 'error', errors: [error] };
    }
    return {
        type: 'ok',
        scriptOffset: scriptBlock.loc.start.line - 1,
        scriptSetupAst: scriptBlock === null || scriptBlock === void 0 ? void 0 : scriptBlock.scriptSetupAst,
        scriptAst: scriptBlock === null || scriptBlock === void 0 ? void 0 : scriptBlock.scriptAst,
    };
}
function findGraphQLTags(text, ext, uri, logger) {
    const result = [];
    const plugins = BABEL_PLUGINS.slice(0, BABEL_PLUGINS.length);
    const isVueLike = ext === '.vue' || ext === '.svelte';
    let parsedASTs = [];
    let scriptOffset = 0;
    if (isVueLike) {
        const parseVueSFCResult = parseVueSFC(text);
        if (parseVueSFCResult.type === 'error') {
            logger.error(`Could not parse the "${ext}" file at ${uri} to extract the graphql tags:`);
            for (const error of parseVueSFCResult.errors) {
                logger.error(String(error));
            }
            return [];
        }
        if (parseVueSFCResult.scriptAst !== undefined) {
            parsedASTs.push(...parseVueSFCResult.scriptAst);
        }
        if (parseVueSFCResult.scriptSetupAst !== undefined) {
            parsedASTs.push(...parseVueSFCResult.scriptSetupAst);
        }
        scriptOffset = parseVueSFCResult.scriptOffset;
    }
    else {
        const isTypeScript = ['.ts', '.tsx', '.cts', '.mts'].includes(ext);
        if (isTypeScript) {
            plugins === null || plugins === void 0 ? void 0 : plugins.push('typescript');
        }
        else {
            plugins === null || plugins === void 0 ? void 0 : plugins.push('flow', 'flowComments');
        }
        PARSER_OPTIONS.plugins = plugins;
        try {
            parsedASTs = [(0, parser_1.parse)(text, PARSER_OPTIONS)];
        }
        catch (error) {
            const type = isTypeScript ? 'TypeScript' : 'JavaScript';
            logger.error(`Could not parse the ${type} file at ${uri} to extract the graphql tags:`);
            logger.error(String(error));
            return [];
        }
    }
    const asts = parsedASTs;
    const parseTemplateLiteral = (node) => {
        var _a;
        const { loc } = node.quasis[0];
        if (loc) {
            if (node.quasis.length > 1) {
                const last = node.quasis.pop();
                if ((_a = last === null || last === void 0 ? void 0 : last.loc) === null || _a === void 0 ? void 0 : _a.end) {
                    loc.end = last.loc.end;
                }
            }
            const template = node.quasis.length > 1
                ? node.quasis.map(quasi => quasi.value.raw).join('')
                : node.quasis[0].value.raw;
            const range = new graphql_language_service_1.Range(new graphql_language_service_1.Position(loc.start.line - 1 + scriptOffset, loc.start.column), new graphql_language_service_1.Position(loc.end.line - 1 + scriptOffset, loc.end.column));
            result.push({
                tag: '',
                template,
                range,
            });
        }
    };
    const visitors = {
        CallExpression(node) {
            if (!('callee' in node)) {
                return;
            }
            const { callee } = node;
            if (callee.type === 'Identifier' &&
                getGraphQLTagName(callee) &&
                'arguments' in node) {
                const templateLiteral = node.arguments[0];
                if (templateLiteral && templateLiteral.type === 'TemplateLiteral') {
                    parseTemplateLiteral(templateLiteral);
                    return;
                }
            }
            traverse(node, visitors);
        },
        TaggedTemplateExpression(node) {
            var _a;
            const tagName = getGraphQLTagName(node.tag);
            if (tagName) {
                const { loc } = node.quasi.quasis[0];
                const template = node.quasi.quasis.length > 1
                    ? node.quasi.quasis.map(quasi => quasi.value.raw).join('')
                    : node.quasi.quasis[0].value.raw;
                if (loc && node.quasi.quasis.length > 1) {
                    const last = node.quasi.quasis.pop();
                    if ((_a = last === null || last === void 0 ? void 0 : last.loc) === null || _a === void 0 ? void 0 : _a.end) {
                        loc.end = last.loc.end;
                    }
                }
                if (loc) {
                    const range = new graphql_language_service_1.Range(new graphql_language_service_1.Position(loc.start.line - 1 + scriptOffset, loc.start.column), new graphql_language_service_1.Position(loc.end.line - 1 + scriptOffset, loc.end.column));
                    result.push({
                        tag: tagName,
                        template: template.endsWith('\n')
                            ? template.slice(0, template.length - 1)
                            : template,
                        range,
                    });
                }
            }
        },
        TemplateLiteral(node) {
            var _a, _b;
            const hasGraphQLPrefix = node.quasis[0].value.raw.startsWith('#graphql\n');
            const hasGraphQLComment = Boolean((_b = (_a = node.leadingComments) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value.match(/^\s*GraphQL\s*$/));
            if (hasGraphQLPrefix || hasGraphQLComment) {
                parseTemplateLiteral(node);
            }
        },
    };
    for (const ast of asts) {
        visit(ast, visitors);
    }
    return result;
}
exports.findGraphQLTags = findGraphQLTags;
const IGNORED_KEYS = {
    comments: true,
    end: true,
    leadingComments: true,
    loc: true,
    name: true,
    start: true,
    trailingComments: true,
    type: true,
};
function getGraphQLTagName(tag) {
    if (tag.type === 'Identifier' && DEFAULT_STABLE_TAGS.includes(tag.name)) {
        return tag.name;
    }
    if (tag.type === 'MemberExpression' &&
        tag.object.type === 'Identifier' &&
        tag.object.name === 'graphql' &&
        tag.property.type === 'Identifier' &&
        tag.property.name === 'experimental') {
        return 'graphql.experimental';
    }
    return null;
}
function visit(node, visitors) {
    const fn = visitors[node.type];
    if (fn && fn != null) {
        fn(node);
        return;
    }
    traverse(node, visitors);
}
function traverse(node, visitors) {
    for (const key in node) {
        if (IGNORED_KEYS[key]) {
            continue;
        }
        const prop = node[key];
        if (prop && typeof prop === 'object' && typeof prop.type === 'string') {
            visit(prop, visitors);
        }
        else if (Array.isArray(prop)) {
            for (const item of prop) {
                if (item && typeof item === 'object' && typeof item.type === 'string') {
                    visit(item, visitors);
                }
            }
        }
    }
}
//# sourceMappingURL=findGraphQLTags.js.map