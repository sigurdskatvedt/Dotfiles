"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const net = __importStar(require("node:net"));
const MessageProcessor_1 = require("./MessageProcessor");
const node_1 = require("vscode-jsonrpc/node");
const node_2 = require("vscode-languageserver/node");
const Logger_1 = require("./Logger");
const parseDocument_1 = require("./parseDocument");
const buildOptions = (options) => {
    const serverOptions = { ...options };
    if (serverOptions.loadConfigOptions) {
        const { extensions, rootDir } = serverOptions.loadConfigOptions;
        if (!rootDir) {
            if (serverOptions.configDir) {
                serverOptions.loadConfigOptions.rootDir = serverOptions.configDir;
            }
            else {
                serverOptions.loadConfigOptions.rootDir = process.cwd();
            }
        }
        if (serverOptions.extensions) {
            serverOptions.loadConfigOptions.extensions = [
                ...serverOptions.extensions,
                ...(extensions || []),
            ];
        }
    }
    else {
        serverOptions.loadConfigOptions = {
            rootDir: options.configDir || process.cwd(),
            extensions: [],
        };
    }
    return serverOptions;
};
async function startServer(options) {
    if (!(options === null || options === void 0 ? void 0 : options.method)) {
        return;
    }
    const finalOptions = buildOptions(options);
    let reader;
    let writer;
    switch (options.method) {
        case 'socket':
            if (!options.port) {
                process.stderr.write('--port is required to establish socket connection.');
                process.exit(1);
            }
            const { port, hostname } = options;
            const socket = net
                .createServer(async (client) => {
                client.setEncoding('utf8');
                reader = new node_1.SocketMessageReader(client);
                writer = new node_1.SocketMessageWriter(client);
                client.on('end', () => {
                    socket.close();
                    process.exit(0);
                });
                const s = await initializeHandlers({
                    reader,
                    writer,
                    options: finalOptions,
                });
                s.listen();
            })
                .listen(port, hostname);
            return;
        case 'stream':
            reader = new node_1.StreamMessageReader(process.stdin);
            writer = new node_1.StreamMessageWriter(process.stdout);
            break;
        default:
            reader = new node_1.IPCMessageReader(process);
            writer = new node_1.IPCMessageWriter(process);
            break;
    }
    const serverWithHandlers = await initializeHandlers({
        reader,
        writer,
        options: finalOptions,
    });
    serverWithHandlers.listen();
}
exports.default = startServer;
async function initializeHandlers({ reader, writer, options, }) {
    const connection = (0, node_2.createConnection)(reader, writer);
    const logger = new Logger_1.Logger(connection);
    try {
        await addHandlers({ connection, logger, ...options });
        return connection;
    }
    catch (err) {
        logger.error('There was an error initializing the server connection');
        logger.error(String(err));
        process.exit(1);
    }
}
function reportDiagnostics(diagnostics, connection) {
    if (diagnostics) {
        void connection.sendNotification(node_2.PublishDiagnosticsNotification.type, diagnostics);
    }
}
async function addHandlers({ connection, logger, config, parser, fileExtensions, graphqlFileExtensions, tmpDir, loadConfigOptions, }) {
    const messageProcessor = new MessageProcessor_1.MessageProcessor({
        logger,
        config,
        parser,
        fileExtensions: fileExtensions || parseDocument_1.DEFAULT_SUPPORTED_EXTENSIONS,
        graphqlFileExtensions: graphqlFileExtensions || parseDocument_1.DEFAULT_SUPPORTED_GRAPHQL_EXTENSIONS,
        tmpDir,
        loadConfigOptions,
        connection,
    });
    connection.onNotification(node_2.DidOpenTextDocumentNotification.type, async (params) => {
        const diagnostics = await messageProcessor.handleDidOpenOrSaveNotification(params);
        reportDiagnostics(diagnostics, connection);
    });
    connection.onNotification(node_2.DidSaveTextDocumentNotification.type, async (params) => {
        const diagnostics = await messageProcessor.handleDidOpenOrSaveNotification(params);
        reportDiagnostics(diagnostics, connection);
    });
    connection.onNotification(node_2.DidChangeTextDocumentNotification.type, async (params) => {
        const diagnostics = await messageProcessor.handleDidChangeNotification(params);
        reportDiagnostics(diagnostics, connection);
    });
    connection.onNotification(node_2.DidCloseTextDocumentNotification.type, params => messageProcessor.handleDidCloseNotification(params));
    connection.onRequest(node_2.ShutdownRequest.type, () => messageProcessor.handleShutdownRequest());
    connection.onNotification(node_2.ExitNotification.type, () => messageProcessor.handleExitNotification());
    connection.onNotification('$/cancelRequest', () => ({}));
    connection.onRequest(node_2.InitializeRequest.type, (params, token) => messageProcessor.handleInitializeRequest(params, token, loadConfigOptions.rootDir));
    connection.onRequest(node_2.CompletionRequest.type, params => messageProcessor.handleCompletionRequest(params));
    connection.onRequest(node_2.CompletionResolveRequest.type, item => item);
    connection.onRequest(node_2.DefinitionRequest.type, params => messageProcessor.handleDefinitionRequest(params));
    connection.onRequest(node_2.HoverRequest.type, params => messageProcessor.handleHoverRequest(params));
    connection.onNotification(node_2.DidChangeWatchedFilesNotification.type, params => messageProcessor.handleWatchedFilesChangedNotification(params));
    connection.onRequest(node_2.DocumentSymbolRequest.type, params => messageProcessor.handleDocumentSymbolRequest(params));
    connection.onRequest(node_2.WorkspaceSymbolRequest.type, params => messageProcessor.handleWorkspaceSymbolRequest(params));
    connection.onNotification(node_2.DidChangeConfigurationNotification.type, params => messageProcessor.handleDidChangeConfiguration(params));
}
//# sourceMappingURL=startServer.js.map